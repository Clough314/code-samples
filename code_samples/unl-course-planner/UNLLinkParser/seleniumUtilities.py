"""
    The purpose of this class is to provide
    a convenient collection of functions to harvest
    rendered (includes dynamic JS changes on webpage creation)
    HTML and write it to a local file for data ex
"""

import requests
from selenium import webdriver
from time import sleep
from sys import argv, exit

def main():
    print("Args:")
    for i in range(len(argv)):
        print(str(i) + ") " + argv[i])

    if(argv[1] == "-s"):
        writeHTMLFromURL(argv[2], argv[3])
    elif argv[1] == "-m":
        writeHTMLFromURLs(argv[2], argv[3])

    return

def writeHTMLFromURL(url, outputFilepath):
    html = getHTMLFromURL(url)
    _writeStringToFile(html, outputFilepath)
    return

def writeHTMLFromURLs(urls, outputFilepaths):
    """
        Takes a list of URLs and a list of filepaths,
        then harvests the browser-rendered HTML from each
        URL and writes the content to a file at the
        corresponding outputFilepath
    """

    if(len(urls) != len(outputFilepaths)):
        print("ERROR: There does not exist an equal amount of URLs and outputFilenames")

    browser = webdriver.Firefox()

    for i in range(len(urls)):
        html = _getHTMLFromURLWithBrowser(urls[i].strip(), browser)
        _writeStringToFile(html, outputFilepaths[i])
        sleep(1)

    browser.quit()
    return

def getHTMLFromURL(url):
    """
        Render page given by URL with Firefox,
        return the generated HTML
        (will handle dynamically generated HTML from JS)
    """
    browser = webdriver.Firefox()

    #navigate to page
    browser.get(url)

    #returns the inner HTML as a string
    innerHTML = browser.execute_script("return document.body.innerHTML")

    browser.quit()
    return innerHTML

def _getHTMLFromURLWithBrowser(url, browser):
    """
        Render page given by URL with provided browser,
        return the HTML generated by the browser
        (will handle dynamically generated HTML from JS)
    """

    browser.get(url)
    #returns the inner HTML as a string
    innerHTML = browser.execute_script("return document.body.innerHTML")

    browser.quit()
    return innerHTML

def _writeStringToFile(string, filepath):
    """
        Provided string will be written to provided filepath
    """

    f = open(filepath, "w")
    f.write(string)
    f.close()
    return

if __name__ == '__main__':
    main()
