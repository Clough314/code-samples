"""
    The purpose of this class is to provide
    a convenient collection of functions to harvest
    rendered (includes dynamic JS changes on webpage creation)
    HTML and write it to a local file for data ex
"""

from selenium import webdriver
from time import sleep
from sys import argv, exit

def main():

    if len(argv) == 1:
        printOptionsBanner()
        exit()

    if argv[1] == "-s":
        writeHTMLFromURL(argv[2])
    elif argv[1] == "-m":
        writeHTMLFromURLs(argv[2])
    else:
        print("ERROR: Invalid option selected")
        printOptionsBanner()

    return

def printOptionsBanner():
    """
        Prints available user options to stdout
    """
    print("Options:"
        + "\n-s URL"
        + "\n-m Filepath containing URLs")
    return

def writeHTMLFromURL(url):
    """
        Takes a URL
        Harvests the browser-rendered HTML from the URL
        Writes the content to a file in the current directory
    """
    html = _getHTMLFromURL(url)
    _writeStringToFile(html, "output.html")
    return

def writeHTMLFromURLs(filepath):
    """
        Takes a file containing a list of URLs
        Harvests the browser-rendered HTML from each URL
        Writes the content to files in the current directory
    """
    urls = _loadFile(filepath)

    browser = webdriver.Firefox()

    for i in range(len(urls)):
        html = _getHTMLFromURLWithBrowser(urls[i].strip(), browser)
        _writeStringToFile(html, "output" + str(i) + ".html")
        sleep(1)

    browser.quit()
    return

def _getHTMLFromURL(url):
    """
        Render page given by URL with Firefox,
        return the generated HTML
        (will handle dynamically generated HTML from JS)
    """
    browser = webdriver.Firefox()

    browser.get(url) # Navigates to webpage

    #returns the inner HTML as a string
    innerHTML = browser.execute_script("return document.body.innerHTML")

    browser.quit()
    return innerHTML

def _getHTMLFromURLWithBrowser(url, browser):
    """
        Render page given by URL with provided browser,
        return the HTML generated by the browser
        (will handle dynamically generated HTML from JS)
    """
    browser.get(url) # Fetches the webpage
    # Returns the inner HTML as a string
    innerHTML = browser.execute_script("return document.body.innerHTML")

    browser.quit()
    return innerHTML

def _writeStringToFile(string, filepath):
    """
        Provided string will be written to provided filepath
    """
    f = open(filepath, "w")
    f.write(string)
    f.close()
    return

def _loadFile(filepath):
    """
        Loads file, returns list of lines
    """
    f = open(filepath, 'r')

    lines = list(f)
    for line in list(f):
        if(line.strip() != ""):
            lines.append(line.strip())

    return lines

if __name__ == '__main__':
    main()
